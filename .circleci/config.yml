version: 2.1

orbs:
  win: circleci/windows@5.1.1
  macos: circleci/macos@2.5.4

jobs:
  windows_x86_64_compile:
    executor: win/default
    steps:
      - checkout
      - restore_cache:
          keys:
            - cargo-{{ arch }}-{{ checksum "Cargo.toml" }}
            - cargo-{{ arch }}
      - run: curl.exe --output rustup-init.exe --url https://static.rust-lang.org/rustup/dist/x86_64-pc-windows-msvc/rustup-init.exe
      - run: ./rustup-init.exe -vy
      - run: rustup toolchain install stable-x86_64-pc-windows-msvc
      - run: rustup default stable-x86_64-pc-windows-msvc
      - run: choco install -y mingw --version=13.2.0
      - run: choco install -y nsis
      # Run checks
      - run: cargo check
      - run: cargo fmt -- --check
      - run: cargo build --release
      - run: cargo test --release
      - run: |
          cargo install cargo-cache
          cargo-cache -a clean-unref
      - save_cache:
          key: cargo-{{ arch }}-{{ checksum "Cargo.toml" }}
          paths:
            - ~/.cargo
  windows_x86_64_build:
    executor: win/default
    steps:
      - checkout
      - restore_cache:
          keys:
            - cargo-{{ arch }}-{{ checksum "Cargo.toml" }}
            - cargo-{{ arch }}
      - run: choco install -y mingw --version=13.2.0
      - run: choco install -y nsis
      - run: curl.exe --output rustup-init.exe --url https://static.rust-lang.org/rustup/dist/x86_64-pc-windows-gnu/rustup-init.exe
      - run: ./rustup-init.exe -vy
      - run: rustup toolchain install stable-x86_64-pc-windows-msvc
      - run: rustup default stable-x86_64-pc-windows-msvc
      - run: cargo build --release
      - run: cargo test --release
      - run:
         name: Build agent installers with NSIS
         shell: powershell.exe
         command: |
           & "C:\Program Files (x86)\NSIS\Bin\makensis" ./installer/windows/agent-installer.nsi
           if ($LASTEXITCODE -ne 0) {
             Write-Host "makensis failed with exit code $LASTEXITCODE"
             exit 1
           }
           & "C:\Program Files (x86)\NSIS\Bin\makensis" ./installer/windows/agent-installer-service-user.nsi
           if ($LASTEXITCODE -ne 0) {
             Write-Host "makensis failed with exit code $LASTEXITCODE"
             exit 1
           }
           & "C:\Program Files (x86)\NSIS\Bin\makensis" ./installer/windows/agent-installer-session-user.nsi
           if ($LASTEXITCODE -ne 0) {
             Write-Host "makensis failed with exit code $LASTEXITCODE"
             exit 1
           }
      - run:
          name: push to jfrog
          command: |
            $env:version = if ($env:CIRCLE_TAG) { $env:CIRCLE_TAG } else { if ($env:CIRCLE_BRANCH -eq "main") { "latest" } else { "prerelease" } }
            curl.exe --fail-with-body -u samuel.hassine@filigran.io:$env:JFROG_TOKEN -T ./target/release/openaev-agent.exe "https://filigran.jfrog.io/artifactory/openaev-agent/windows/x86_64/openaev-agent-$env:version.exe"
            curl.exe --fail-with-body -u samuel.hassine@filigran.io:$env:JFROG_TOKEN -T ./installer/windows/agent-installer.exe "https://filigran.jfrog.io/artifactory/openaev-agent/windows/x86_64/openaev-agent-installer-$env:version.exe"
            curl.exe --fail-with-body -u samuel.hassine@filigran.io:$env:JFROG_TOKEN -T ./installer/windows/agent-installer.ps1 "https://filigran.jfrog.io/artifactory/openaev-agent/windows/openaev-agent-installer-$env:version.ps1"
            curl.exe --fail-with-body -u samuel.hassine@filigran.io:$env:JFROG_TOKEN -T ./installer/windows/agent-upgrade.ps1 "https://filigran.jfrog.io/artifactory/openaev-agent/windows/openaev-agent-upgrade-$env:version.ps1"
            curl.exe --fail-with-body -u samuel.hassine@filigran.io:$env:JFROG_TOKEN -T ./installer/windows/agent-installer-session-user.exe "https://filigran.jfrog.io/artifactory/openaev-agent/windows/x86_64/openaev-agent-installer-session-user-$env:version.exe"
            curl.exe --fail-with-body -u samuel.hassine@filigran.io:$env:JFROG_TOKEN -T ./installer/windows/agent-installer-session-user.ps1 "https://filigran.jfrog.io/artifactory/openaev-agent/windows/openaev-agent-installer-session-user-$env:version.ps1"
            curl.exe --fail-with-body -u samuel.hassine@filigran.io:$env:JFROG_TOKEN -T ./installer/windows/agent-upgrade-session-user.ps1 "https://filigran.jfrog.io/artifactory/openaev-agent/windows/openaev-agent-upgrade-session-user-$env:version.ps1"
            curl.exe --fail-with-body -u samuel.hassine@filigran.io:$env:JFROG_TOKEN -T ./installer/windows/agent-installer-service-user.exe "https://filigran.jfrog.io/artifactory/openaev-agent/windows/x86_64/openaev-agent-installer-service-user-$env:version.exe"
            curl.exe --fail-with-body -u samuel.hassine@filigran.io:$env:JFROG_TOKEN -T ./installer/windows/agent-installer-service-user.ps1 "https://filigran.jfrog.io/artifactory/openaev-agent/windows/openaev-agent-installer-service-user-$env:version.ps1"
            curl.exe --fail-with-body -u samuel.hassine@filigran.io:$env:JFROG_TOKEN -T ./installer/windows/agent-upgrade-service-user.ps1 "https://filigran.jfrog.io/artifactory/openaev-agent/windows/openaev-agent-upgrade-service-user-$env:version.ps1"
      - run: |
          cargo install cargo-cache
          cargo-cache -a clean-unref
      - save_cache:
          key: cargo-{{ arch }}-{{ checksum "Cargo.toml" }}
          paths:
            - ~/.cargo
  windows_arm_64_compile:
    machine: true
    resource_class: openbas-platform/openbas-agent-windows-64bits-arm
    shell: 'powershell.exe -ExecutionPolicy Bypass'
    steps:
      - checkout
      - restore_cache:
          keys:
            - cargo-{{ arch }}-{{ checksum "Cargo.toml" }}
            - cargo-{{ arch }}
      - run: curl.exe -SL --output vs_buildtools.exe --url https://aka.ms/vs/17/release/vs_buildtools.exe
      - run: ./vs_buildtools.exe --add Microsoft.VisualStudio.Component.Clang --add Microsoft.VisualStudio.Component.VC.tools.arm64 --wait --includeRecommended --quiet --norestart
      - run: curl.exe --output rustup-init.exe --url https://static.rust-lang.org/rustup/dist/aarch64-pc-windows-msvc/rustup-init.exe
      - run: ./rustup-init.exe -vy
      - run: Invoke-Expression '& "$env:USERPROFILE\.cargo\bin\rustup" toolchain install stable-aarch64-pc-windows-msvc'
      - run: Invoke-Expression '& "$env:USERPROFILE\.cargo\bin\rustup" default stable-aarch64-pc-windows-msvc'
      # Install quality tools
      - run: |
          $env:PATH = "C:\Program Files (x86)\Microsoft Visual Studio\2022\BuildTools\VC\Tools\Llvm\ARM64\bin;" + $env:PATH;
      # Run checks
      - run: $env:PATH = "C:\Program Files (x86)\Microsoft Visual Studio\2022\BuildTools\VC\Tools\Llvm\ARM64\bin;" + $env:PATH; Invoke-Expression '& "$env:USERPROFILE\.cargo\bin\cargo" check'
      - run: git config --global --unset url.ssh://git@github.com.insteadOf
      - run: git config --global url.ssh://git@github.com.insteadOf https://github.com/
      - run: $env:PATH = "C:\Program Files (x86)\Microsoft Visual Studio\2022\BuildTools\VC\Tools\Llvm\ARM64\bin;" + $env:PATH; Invoke-Expression '& "$env:USERPROFILE\.cargo\bin\cargo" build --release'
      - run: $env:PATH = "C:\Program Files (x86)\Microsoft Visual Studio\2022\BuildTools\VC\Tools\Llvm\ARM64\bin;" + $env:PATH; Invoke-Expression '& "$env:USERPROFILE\.cargo\bin\cargo" test --release'
      - run: |
          cargo install cargo-cache
          cargo-cache -a clean-unref
      - save_cache:
          key: cargo-{{ arch }}-{{ checksum "Cargo.toml" }}
          paths:
            - ~/.cargo
  windows_arm_64_build:
    machine: true
    resource_class: openbas-platform/openbas-agent-windows-64bits-arm
    shell: 'powershell.exe -ExecutionPolicy Bypass'
    steps:
      - checkout
      - restore_cache:
          keys:
            - cargo-{{ arch }}-{{ checksum "Cargo.toml" }}
            - cargo-{{ arch }}
      - run: choco install -y nsis
      - run: curl.exe -SL --output vs_buildtools.exe --url https://aka.ms/vs/17/release/vs_buildtools.exe
      - run: ./vs_buildtools.exe --add Microsoft.VisualStudio.Component.Clang --add Microsoft.VisualStudio.Component.VC.tools.arm64 --wait --includeRecommended --quiet --norestart
      - run: curl.exe --output rustup-init.exe --url https://static.rust-lang.org/rustup/dist/aarch64-pc-windows-msvc/rustup-init.exe
      - run: ./rustup-init.exe -vy
      - run: Invoke-Expression '& "$env:USERPROFILE\.cargo\bin\rustup" toolchain install stable-aarch64-pc-windows-msvc'
      - run: Invoke-Expression '& "$env:USERPROFILE\.cargo\bin\rustup" default stable-aarch64-pc-windows-msvc'
      - run: $env:PATH = "C:\Program Files (x86)\Microsoft Visual Studio\2022\BuildTools\VC\Tools\Llvm\ARM64\bin;" + $env:PATH; Invoke-Expression '& "$env:USERPROFILE\.cargo\bin\cargo" build --release'
      - run: $env:PATH = "C:\Program Files (x86)\Microsoft Visual Studio\2022\BuildTools\VC\Tools\Llvm\ARM64\bin;" + $env:PATH; Invoke-Expression '& "$env:USERPROFILE\.cargo\bin\cargo" test --release'
      - run:
         name: Build agent installers with NSIS
         shell: powershell.exe
         command: |
           & "C:\Program Files (x86)\NSIS\Bin\makensis" ./installer/windows/agent-installer.nsi
           if ($LASTEXITCODE -ne 0) {
             Write-Host "makensis failed with exit code $LASTEXITCODE"
             exit 1
           }
           & "C:\Program Files (x86)\NSIS\Bin\makensis" ./installer/windows/agent-installer-service-user.nsi
           if ($LASTEXITCODE -ne 0) {
             Write-Host "makensis failed with exit code $LASTEXITCODE"
             exit 1
           }
           & "C:\Program Files (x86)\NSIS\Bin\makensis" ./installer/windows/agent-installer-session-user.nsi
           if ($LASTEXITCODE -ne 0) {
             Write-Host "makensis failed with exit code $LASTEXITCODE"
             exit 1
           }
      - run:
          name: push to jfrog
          command: |
            $env:version = if ($env:CIRCLE_TAG) { $env:CIRCLE_TAG } else { if ($env:CIRCLE_BRANCH -eq "main") { "latest" } else { "prerelease" } }
            curl.exe --fail-with-body -u samuel.hassine@filigran.io:$env:JFROG_TOKEN -T ./target/release/openaev-agent.exe "https://filigran.jfrog.io/artifactory/openaev-agent/windows/arm64/openaev-agent-$env:version.exe"
            curl.exe --fail-with-body -u samuel.hassine@filigran.io:$env:JFROG_TOKEN -T ./installer/windows/agent-installer.exe "https://filigran.jfrog.io/artifactory/openaev-agent/windows/arm64/openaev-agent-installer-$env:version.exe"
            curl.exe --fail-with-body -u samuel.hassine@filigran.io:$env:JFROG_TOKEN -T ./installer/windows/agent-installer.ps1 "https://filigran.jfrog.io/artifactory/openaev-agent/windows/openaev-agent-installer-$env:version.ps1"
            curl.exe --fail-with-body -u samuel.hassine@filigran.io:$env:JFROG_TOKEN -T ./installer/windows/agent-upgrade.ps1 "https://filigran.jfrog.io/artifactory/openaev-agent/windows/openaev-agent-upgrade-$env:version.ps1"
            curl.exe --fail-with-body -u samuel.hassine@filigran.io:$env:JFROG_TOKEN -T ./installer/windows/agent-installer-session-user.exe "https://filigran.jfrog.io/artifactory/openaev-agent/windows/arm64/openaev-agent-installer-session-user-$env:version.exe"
            curl.exe --fail-with-body -u samuel.hassine@filigran.io:$env:JFROG_TOKEN -T ./installer/windows/agent-installer-session-user.ps1 "https://filigran.jfrog.io/artifactory/openaev-agent/windows/openaev-agent-installer-session-user-$env:version.ps1"
            curl.exe --fail-with-body -u samuel.hassine@filigran.io:$env:JFROG_TOKEN -T ./installer/windows/agent-upgrade-session-user.ps1 "https://filigran.jfrog.io/artifactory/openaev-agent/windows/openaev-agent-upgrade-session-user-$env:version.ps1"
            curl.exe --fail-with-body -u samuel.hassine@filigran.io:$env:JFROG_TOKEN -T ./installer/windows/agent-installer-service-user.exe "https://filigran.jfrog.io/artifactory/openaev-agent/windows/arm64/openaev-agent-installer-service-user-$env:version.exe"
            curl.exe --fail-with-body -u samuel.hassine@filigran.io:$env:JFROG_TOKEN -T ./installer/windows/agent-installer-service-user.ps1 "https://filigran.jfrog.io/artifactory/openaev-agent/windows/openaev-agent-installer-service-user-$env:version.ps1"
            curl.exe --fail-with-body -u samuel.hassine@filigran.io:$env:JFROG_TOKEN -T ./installer/windows/agent-upgrade-service-user.ps1 "https://filigran.jfrog.io/artifactory/openaev-agent/windows/openaev-agent-upgrade-service-user-$env:version.ps1"
      - run: |
          cargo install cargo-cache
          cargo-cache -a clean-unref
      - save_cache:
          key: cargo-{{ arch }}-{{ checksum "Cargo.toml" }}
          paths:
            - ~/.cargo
  linux_x86_64_compile:
    machine:
      image: ubuntu-2204:current
    steps:
      - checkout
      - restore_cache:
          keys:
            - cargo-{{ arch }}-{{ checksum "Cargo.toml" }}
            - cargo-{{ arch }}
      - run: sudo apt-get update
      - run: sudo apt-get -y install curl musl-tools
      - run: curl https://sh.rustup.rs -sSf | sh -s -- -y
      - run: . "$HOME/.cargo/env"; rustup target add x86_64-unknown-linux-musl
      # Run checks
      - run: cargo check
      - run: . "$HOME/.cargo/env"; cargo build --target=x86_64-unknown-linux-musl --release
      - run: . "$HOME/.cargo/env"; cargo test --release
      - run: strip ./target/x86_64-unknown-linux-musl/release/openaev-agent
      - run: |
          cargo install cargo-cache
          cargo-cache -a clean-unref
      - save_cache:
          key: cargo-{{ arch }}-{{ checksum "Cargo.toml" }}
          paths:
            - ~/.cargo
  linux_x86_64_build:
    machine:
      image: ubuntu-2204:current
    steps:
      - checkout
      - restore_cache:
          keys:
            - cargo-{{ arch }}-{{ checksum "Cargo.toml" }}
            - cargo-{{ arch }}
      - run: sudo apt-get update
      - run: sudo apt-get -y install curl musl-tools
      - run: curl https://sh.rustup.rs -sSf | sh -s -- -y
      - run: . "$HOME/.cargo/env"; rustup target add x86_64-unknown-linux-musl
      - run: . "$HOME/.cargo/env"; cargo build --target=x86_64-unknown-linux-musl --release
      - run: . "$HOME/.cargo/env"; cargo test --release
      - run: strip ./target/x86_64-unknown-linux-musl/release/openaev-agent
      - run:
          name: push to jfrog
          command: |
            export version=${CIRCLE_TAG:-$( [ "$CIRCLE_BRANCH" = "main" ] && echo "latest" || echo "prerelease" )}
            curl --fail-with-body -usamuel.hassine@filigran.io:$JFROG_TOKEN -T ./target/x86_64-unknown-linux-musl/release/openaev-agent "https://filigran.jfrog.io/artifactory/openaev-agent/linux/x86_64/openaev-agent-$version"
            curl --fail-with-body -usamuel.hassine@filigran.io:$JFROG_TOKEN -T ./installer/linux/agent-installer.sh "https://filigran.jfrog.io/artifactory/openaev-agent/linux/openaev-agent-installer-$version.sh"
            curl --fail-with-body -usamuel.hassine@filigran.io:$JFROG_TOKEN -T ./installer/linux/agent-upgrade.sh "https://filigran.jfrog.io/artifactory/openaev-agent/linux/openaev-agent-upgrade-$version.sh"
            curl --fail-with-body -usamuel.hassine@filigran.io:$JFROG_TOKEN -T ./installer/linux/agent-installer-session-user.sh "https://filigran.jfrog.io/artifactory/openaev-agent/linux/openaev-agent-installer-session-user-$version.sh"
            curl --fail-with-body -usamuel.hassine@filigran.io:$JFROG_TOKEN -T ./installer/linux/agent-upgrade-session-user.sh "https://filigran.jfrog.io/artifactory/openaev-agent/linux/openaev-agent-upgrade-session-user-$version.sh"
            curl --fail-with-body -usamuel.hassine@filigran.io:$JFROG_TOKEN -T ./installer/linux/agent-installer-service-user.sh "https://filigran.jfrog.io/artifactory/openaev-agent/linux/openaev-agent-installer-service-user-$version.sh"
            curl --fail-with-body -usamuel.hassine@filigran.io:$JFROG_TOKEN -T ./installer/linux/agent-upgrade-service-user.sh "https://filigran.jfrog.io/artifactory/openaev-agent/linux/openaev-agent-upgrade-service-user-$version.sh"
      - run: |
          cargo install cargo-cache
          cargo-cache -a clean-unref
      - save_cache:
          key: cargo-{{ arch }}-{{ checksum "Cargo.toml" }}
          paths:
            - ~/.cargo
  linux_arm_64_compile:
    machine:
      image: ubuntu-2204:current
    resource_class: arm.medium
    steps:
      - checkout
      - restore_cache:
          keys:
            - cargo-{{ arch }}-{{ checksum "Cargo.toml" }}
            - cargo-{{ arch }}
      - run: sudo apt-get update
      - run: sudo apt-get -y install curl musl-tools
      - run: curl https://sh.rustup.rs -sSf | sh -s -- -y
      - run: . "$HOME/.cargo/env"; rustup target add aarch64-unknown-linux-musl
      # Run checks
      - run: cargo check
      - run: . "$HOME/.cargo/env"; cargo build --target=aarch64-unknown-linux-musl --release
      - run: . "$HOME/.cargo/env"; cargo test --release
      - run: strip ./target/aarch64-unknown-linux-musl/release/openaev-agent
      - run: |
          cargo install cargo-cache
          cargo-cache -a clean-unref
      - save_cache:
          key: cargo-{{ arch }}-{{ checksum "Cargo.toml" }}
          paths:
            - ~/.cargo
  linux_arm_64_build:
    machine:
      image: ubuntu-2204:current
    resource_class: arm.medium
    steps:
      - checkout
      - restore_cache:
          keys:
            - cargo-{{ arch }}-{{ checksum "Cargo.toml" }}
            - cargo-{{ arch }}
      - run: sudo apt-get update
      - run: sudo apt-get -y install curl musl-tools
      - run: curl https://sh.rustup.rs -sSf | sh -s -- -y
      - run: . "$HOME/.cargo/env"; rustup target add aarch64-unknown-linux-musl
      - run: . "$HOME/.cargo/env"; cargo build --target=aarch64-unknown-linux-musl --release
      - run: . "$HOME/.cargo/env"; cargo test --release
      - run: strip ./target/aarch64-unknown-linux-musl/release/openaev-agent
      - run:
          name: push to jfrog
          command: |
            export version=${CIRCLE_TAG:-$( [ "$CIRCLE_BRANCH" = "main" ] && echo "latest" || echo "prerelease" )}
            curl --fail-with-body -usamuel.hassine@filigran.io:$JFROG_TOKEN -T ./target/aarch64-unknown-linux-musl/release/openaev-agent "https://filigran.jfrog.io/artifactory/openaev-agent/linux/arm64/openaev-agent-$version"
            curl --fail-with-body -usamuel.hassine@filigran.io:$JFROG_TOKEN -T ./installer/linux/agent-installer.sh "https://filigran.jfrog.io/artifactory/openaev-agent/linux/openaev-agent-installer-$version.sh"
            curl --fail-with-body -usamuel.hassine@filigran.io:$JFROG_TOKEN -T ./installer/linux/agent-upgrade.sh "https://filigran.jfrog.io/artifactory/openaev-agent/linux/openaev-agent-upgrade-$version.sh"
            curl --fail-with-body -usamuel.hassine@filigran.io:$JFROG_TOKEN -T ./installer/linux/agent-installer-session-user.sh "https://filigran.jfrog.io/artifactory/openaev-agent/linux/openaev-agent-installer-session-user-$version.sh"
            curl --fail-with-body -usamuel.hassine@filigran.io:$JFROG_TOKEN -T ./installer/linux/agent-upgrade-session-user.sh "https://filigran.jfrog.io/artifactory/openaev-agent/linux/openaev-agent-upgrade-session-user-$version.sh"
            curl --fail-with-body -usamuel.hassine@filigran.io:$JFROG_TOKEN -T ./installer/linux/agent-installer-service-user.sh "https://filigran.jfrog.io/artifactory/openaev-agent/linux/openaev-agent-installer-service-user-$version.sh"
            curl --fail-with-body -usamuel.hassine@filigran.io:$JFROG_TOKEN -T ./installer/linux/agent-upgrade-service-user.sh "https://filigran.jfrog.io/artifactory/openaev-agent/linux/openaev-agent-upgrade-service-user-$version.sh"
      - run: |
          cargo install cargo-cache
          cargo-cache -a clean-unref
      - save_cache:
          key: cargo-{{ arch }}-{{ checksum "Cargo.toml" }}
          paths:
            - ~/.cargo
  macos_arm_64_compile:
    macos:
      xcode: 16.4.0
    resource_class: macos.m1.medium.gen1
    steps:
      - checkout
      - restore_cache:
          keys:
            - cargo-{{ arch }}-{{ checksum "Cargo.toml" }}
            - cargo-{{ arch }}
      - run: curl https://sh.rustup.rs -sSf | sh -s -- -y
      # Run checks
      - run: cargo check
      - run: . "$HOME/.cargo/env"; cargo build --release
      - run: . "$HOME/.cargo/env"; cargo test --release
      - run: strip ./target/release/openaev-agent
      - run: |
          cargo install cargo-cache
          cargo-cache -a clean-unref
      - save_cache:
          key: cargo-{{ arch }}-{{ checksum "Cargo.toml" }}
          paths:
            - ~/.cargo
  macos_arm_64_build:
    macos:
      xcode: 16.4.0
    resource_class: macos.m1.medium.gen1
    steps:
      - checkout
      - restore_cache:
          keys:
            - cargo-{{ arch }}-{{ checksum "Cargo.toml" }}
            - cargo-{{ arch }}
      - run: curl https://sh.rustup.rs -sSf | sh -s -- -y
      - run: . "$HOME/.cargo/env"; cargo build --release
      - run: . "$HOME/.cargo/env"; cargo test --release
      - run: strip ./target/release/openaev-agent
      - run:
          name: push to jfrog
          command: |
            export version=${CIRCLE_TAG:-$( [ "$CIRCLE_BRANCH" = "main" ] && echo "latest" || echo "prerelease" )}
            curl --fail-with-body -usamuel.hassine@filigran.io:$JFROG_TOKEN -T ./target/release/openaev-agent "https://filigran.jfrog.io/artifactory/openaev-agent/macos/arm64/openaev-agent-$version"
            curl --fail-with-body -usamuel.hassine@filigran.io:$JFROG_TOKEN -T ./installer/macos/agent-installer.sh "https://filigran.jfrog.io/artifactory/openaev-agent/macos/openaev-agent-installer-$version.sh"
            curl --fail-with-body -usamuel.hassine@filigran.io:$JFROG_TOKEN -T ./installer/macos/agent-upgrade.sh "https://filigran.jfrog.io/artifactory/openaev-agent/macos/openaev-agent-upgrade-$version.sh"
            curl --fail-with-body -usamuel.hassine@filigran.io:$JFROG_TOKEN -T ./installer/macos/agent-installer-session-user.sh "https://filigran.jfrog.io/artifactory/openaev-agent/macos/openaev-agent-installer-session-user-$version.sh"
            curl --fail-with-body -usamuel.hassine@filigran.io:$JFROG_TOKEN -T ./installer/macos/agent-upgrade-session-user.sh "https://filigran.jfrog.io/artifactory/openaev-agent/macos/openaev-agent-upgrade-session-user-$version.sh"
            curl --fail-with-body -usamuel.hassine@filigran.io:$JFROG_TOKEN -T ./installer/macos/agent-installer-service-user.sh "https://filigran.jfrog.io/artifactory/openaev-agent/macos/openaev-agent-installer-service-user-$version.sh"
            curl --fail-with-body -usamuel.hassine@filigran.io:$JFROG_TOKEN -T ./installer/macos/agent-upgrade-service-user.sh "https://filigran.jfrog.io/artifactory/openaev-agent/macos/openaev-agent-upgrade-service-user-$version.sh"
      - run: |
          cargo install cargo-cache
          cargo-cache -a clean-unref
      - save_cache:
          key: cargo-{{ arch }}-{{ checksum "Cargo.toml" }}
          paths:
            - ~/.cargo
  macos_x86_64_compile:
    machine: true
    resource_class: openbas-platform/openbas-agent-macos-64bits-x86
    steps:
      - checkout
      - restore_cache:
          keys:
            - cargo-{{ arch }}-{{ checksum "Cargo.toml" }}
            - cargo-{{ arch }}
      - run: curl https://sh.rustup.rs -sSf | sh -s -- -y
      - run: rustup toolchain install stable-x86_64-apple-darwin
      - run: rustup default stable-x86_64-apple-darwin
      # Install quality tools
      - run: |
          rustup component add clippy
          rustup component add rustfmt
          cargo install cargo-audit
      # Run checks
      - run: cargo check
      - run: . "$HOME/.cargo/env"; cargo build --release
      - run: . "$HOME/.cargo/env"; cargo test --release
      - run: strip ./target/release/openaev-agent
      - run: |
          cargo install --force cargo-cache
          cargo-cache -a clean-unref
      - save_cache:
          key: cargo-{{ arch }}-{{ checksum "Cargo.toml" }}
          paths:
            - ~/.cargo
  macos_x86_64_build:
    machine: true
    resource_class: openbas-platform/openbas-agent-macos-64bits-x86
    steps:
      - checkout
      - restore_cache:
          keys:
            - cargo-{{ arch }}-{{ checksum "Cargo.toml" }}
            - cargo-{{ arch }}
      - run: curl https://sh.rustup.rs -sSf | sh -s -- -y
      - run: rustup toolchain install stable-x86_64-apple-darwin
      - run: rustup default stable-x86_64-apple-darwin
      - run: . "$HOME/.cargo/env"; cargo build --release
      - run: . "$HOME/.cargo/env"; cargo test --release
      - run: strip ./target/release/openaev-agent
      - run:
          name: push to jfrog
          command: |
            export version=${CIRCLE_TAG:-$( [ "$CIRCLE_BRANCH" = "main" ] && echo "latest" || echo "prerelease" )}
            curl --fail-with-body -usamuel.hassine@filigran.io:$JFROG_TOKEN -T ./target/release/openaev-agent "https://filigran.jfrog.io/artifactory/openaev-agent/macos/x86_64/openaev-agent-$version"
      - run: |
          cargo install --force cargo-cache
          cargo-cache -a clean-unref
      - save_cache:
          key: cargo-{{ arch }}-{{ checksum "Cargo.toml" }}
          paths:
            - ~/.cargo
workflows:
  openaev-agent:
    jobs:
      - windows_x86_64_compile:
          filters:
            tags:
              ignore: /.*/
            branches:
              ignore:
                - main
                - release/current
      - windows_x86_64_build:
          filters:
            tags:
              only: /[0-9]+(\.[0-9]+)+(\.[0-9]+)*/
            branches:
              only:
                - main
                - release/current
      - windows_arm_64_compile:
          filters:
            tags:
              ignore: /.*/
            branches:
              ignore:
                - main
                - release/current
      - windows_arm_64_build:
          filters:
            tags:
              only: /[0-9]+(\.[0-9]+)+(\.[0-9]+)*/
            branches:
              only:
                - main
                - release/current
      - linux_x86_64_compile:
          filters:
            tags:
              ignore: /.*/
            branches:
              ignore:
                - main
                - release/current
      - linux_x86_64_build:
          filters:
            tags:
              only: /[0-9]+(\.[0-9]+)+(\.[0-9]+)*/
            branches:
              only:
                - main
                - release/current
      - linux_arm_64_compile:
          filters:
            tags:
              ignore: /.*/
            branches:
              ignore:
                - main
                - release/current
      - linux_arm_64_build:
          filters:
            tags:
              only: /[0-9]+(\.[0-9]+)+(\.[0-9]+)*/
            branches:
              only:
                - main
                - release/current
      - macos_arm_64_compile:
          filters:
            tags:
              ignore: /.*/
            branches:
              ignore:
                - main
                - release/current
      - macos_arm_64_build:
          filters:
            tags:
              only: /[0-9]+(\.[0-9]+)+(\.[0-9]+)*/
            branches:
              only:
                - main
                - release/current
      - macos_x86_64_compile:
          filters:
            tags:
              ignore: /.*/
            branches:
              ignore:
                - main
                - release/current
      - macos_x86_64_build:
          filters:
            tags:
              only: /[0-9]+(\.[0-9]+)+(\.[0-9]+)*/
            branches:
              only:
                - main
                - release/current
