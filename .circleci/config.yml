version: 2.1

orbs:
  win: circleci/windows@5.1.0
  macos: circleci/macos@2.5.2

jobs:
  windows_x86_64_compile:
    executor: win/default
    steps:
      - run:
          name: Display System Information
          shell: powershell.exe
          command: |
            $hostname = $env:COMPUTERNAME
            $numCPUs = (Get-CimInstance -ClassName Win32_ComputerSystem).NumberOfLogicalProcessors
            $totalMemoryGB = [math]::round((Get-CimInstance -ClassName Win32_ComputerSystem).TotalPhysicalMemory / 1GB, 2)
            $architecture = (Get-CimInstance -ClassName Win32_Processor).Architecture
            $osInfo = Get-CimInstance -ClassName Win32_OperatingSystem
            $osName = $osInfo.Caption
            $osVersion = $osInfo.Version

            # Mapping architecture number to names
            $archName = switch ($architecture) {
              0 { "x86" }
              9 { "x64" }
              default { "Unknown Architecture" }
            }

            Write-Host "Hostname: $hostname"
            Write-Host "Number of CPUs: $numCPUs"
            Write-Host "Total Memory: $totalMemoryGB GB"
            Write-Host "Architecture: $archName"
            Write-Host "OS Name: $osName"
            Write-Host "OS Version: $osVersion"
      - run:
          name: Create and Run CSV Logging Script
          shell: powershell.exe
          command: |
            echo Creating batch script for logging in CSV...
            Add-Content -Path log_usage.bat -Value "@echo off"
            Add-Content -Path log_usage.bat -Value "setlocal"
            Add-Content -Path log_usage.bat -Value "set logFile=usage_log.csv"
            Add-Content -Path log_usage.bat -Value "echo Date and Time, CPU Load, Used RAM (KB), Used RAM (%) > %logFile%"
            Add-Content -Path log_usage.bat -Value ":loop"
            Add-Content -Path log_usage.bat -Value "( "
            Add-Content -Path log_usage.bat -Value "    set timestamp=%date% %time%"
            Add-Content -Path log_usage.bat -Value "    for /f `"tokens=2 delims==`" %%i in ('wmic cpu get loadpercentage /value') do set cpuLoad=%%i"
            Add-Content -Path log_usage.bat -Value "    for /f `"tokens=2 delims==`" %%i in ('wmic OS get FreePhysicalMemory^,TotalVisibleMemorySize /value') do set %%i"
            Add-Content -Path log_usage.bat -Value "    set /a USED_MEMORY=TotalVisibleMemorySize-FreePhysicalMemory"
            Add-Content -Path log_usage.bat -Value "    set /a USED_PERCENTAGE=(USED_MEMORY*100)/TotalVisibleMemorySize"
            Add-Content -Path log_usage.bat -Value "    echo %timestamp%, %cpuLoad%, %USED_MEMORY%, %USED_PERCENTAGE% >> %logFile%"
            Add-Content -Path log_usage.bat -Value ")"
            Add-Content -Path log_usage.bat -Value "timeout /t 10 > nul"
            Add-Content -Path log_usage.bat -Value "goto :loop"

            echo Running the batch script...
            start cmd /c log_usage.bat

            echo Waiting for data collection...
            timeout /t 30 > nul

            echo Terminating data collection...
            taskkill /im cmd.exe /f /t
      - checkout
      - restore_cache:
          keys:
            - cargo-{{ arch }}-{{ checksum "Cargo.toml" }}
            - cargo-{{ arch }}
      - run: curl.exe --output rustup-init.exe --url https://static.rust-lang.org/rustup/dist/x86_64-pc-windows-msvc/rustup-init.exe
      - run: ./rustup-init.exe -vy
      - run: rustup toolchain install stable-x86_64-pc-windows-msvc
      - run: rustup default stable-x86_64-pc-windows-msvc
      - run: choco uninstall rust
      - run: choco install -y mingw nsis
      # Install quality tools
      - run: |
          rustup component add clippy
          rustup component add rustfmt
          cargo install cargo-audit
      # Run checks
      - run: cargo check
      - run: cargo clippy -- -D warnings
      - run: cargo fmt -- --check
      - run: cargo audit
      - run: cargo build --release
      - run: cargo test --release
      - run: |
          cargo install cargo-cache
          cargo-cache -a clean-unref
      - save_cache:
          key: cargo-{{ arch }}-{{ checksum "Cargo.toml" }}
          paths:
            - ~/.cargo
      - run:
          name: Display the Log File
          command: type usage_log.csv
  windows_x86_64_build:
    executor: win/default
    steps:
      - checkout
      - restore_cache:
          keys:
            - cargo-{{ arch }}-{{ checksum "Cargo.toml" }}
            - cargo-{{ arch }}
      - run: choco install -y mingw nsis
      - run: curl.exe --output rustup-init.exe --url https://static.rust-lang.org/rustup/dist/x86_64-pc-windows-gnu/rustup-init.exe
      - run: ./rustup-init.exe -vy
      - run: rustup toolchain install stable-x86_64-pc-windows-msvc
      - run: rustup default stable-x86_64-pc-windows-msvc
      - run: cargo build --release
      - run: cargo test --release
      - run: Invoke-Expression '& "C:\Program Files (x86)\NSIS\Bin\makensis" ./installer/windows/agent-installer.nsi'
      - run: Invoke-Expression '& "C:\Program Files (x86)\NSIS\Bin\makensis" ./installer/windows/agent-installer-service-user.nsi'
      - run: Invoke-Expression '& "C:\Program Files (x86)\NSIS\Bin\makensis" ./installer/windows/agent-installer-session-user.nsi'
      - run:
          name: push to jfrog
          command: |
            $env:version = if ($env:CIRCLE_TAG) { $env:CIRCLE_TAG } else { if ($env:CIRCLE_BRANCH -eq "main") { "latest" } else { "prerelease" } }
            curl.exe -u samuel.hassine@filigran.io:$env:JFROG_TOKEN -T ./target/release/openbas-agent.exe "https://filigran.jfrog.io/artifactory/openbas-agent/windows/x86_64/openbas-agent-$env:version.exe"
            curl.exe -u samuel.hassine@filigran.io:$env:JFROG_TOKEN -T ./installer/windows/agent-installer.exe "https://filigran.jfrog.io/artifactory/openbas-agent/windows/x86_64/openbas-agent-installer-$env:version.exe"
            curl.exe -u samuel.hassine@filigran.io:$env:JFROG_TOKEN -T ./installer/windows/agent-installer.ps1 "https://filigran.jfrog.io/artifactory/openbas-agent/windows/openbas-agent-installer-$env:version.ps1"
            curl.exe -u samuel.hassine@filigran.io:$env:JFROG_TOKEN -T ./installer/windows/agent-upgrade.ps1 "https://filigran.jfrog.io/artifactory/openbas-agent/windows/openbas-agent-upgrade-$env:version.ps1"
            curl.exe -u samuel.hassine@filigran.io:$env:JFROG_TOKEN -T ./installer/windows/agent-installer-session-user.exe "https://filigran.jfrog.io/artifactory/openbas-agent/windows/x86_64/openbas-agent-installer-session-user-$env:version.exe"
            curl.exe -u samuel.hassine@filigran.io:$env:JFROG_TOKEN -T ./installer/windows/agent-installer-session-user.ps1 "https://filigran.jfrog.io/artifactory/openbas-agent/windows/openbas-agent-installer-session-user-$env:version.ps1"
            curl.exe -u samuel.hassine@filigran.io:$env:JFROG_TOKEN -T ./installer/windows/agent-upgrade-session-user.ps1 "https://filigran.jfrog.io/artifactory/openbas-agent/windows/openbas-agent-upgrade-session-user-$env:version.ps1"
            curl.exe -u samuel.hassine@filigran.io:$env:JFROG_TOKEN -T ./installer/windows/agent-installer-service-user.exe "https://filigran.jfrog.io/artifactory/openbas-agent/windows/x86_64/openbas-agent-installer-service-user-$env:version.exe"
            curl.exe -u samuel.hassine@filigran.io:$env:JFROG_TOKEN -T ./installer/windows/agent-installer-service-user.ps1 "https://filigran.jfrog.io/artifactory/openbas-agent/windows/openbas-agent-installer-service-user-$env:version.ps1"
            curl.exe -u samuel.hassine@filigran.io:$env:JFROG_TOKEN -T ./installer/windows/agent-upgrade-service-user.ps1 "https://filigran.jfrog.io/artifactory/openbas-agent/windows/openbas-agent-upgrade-service-user-$env:version.ps1"
      - run: |
          cargo install cargo-cache
          cargo-cache -a clean-unref
      - save_cache:
          key: cargo-{{ arch }}-{{ checksum "Cargo.toml" }}
          paths:
            - ~/.cargo
  windows_arm_64_compile:
    machine: true
    resource_class: openbas-platform/openbas-agent-windows-64bits-arm
    shell: 'powershell.exe -ExecutionPolicy Bypass'
    steps:
      - run:
          name: Display System Information
          shell: powershell.exe
          command: |
            $hostname = $env:COMPUTERNAME
            $numCPUs = (Get-CimInstance -ClassName Win32_ComputerSystem).NumberOfLogicalProcessors
            $totalMemoryGB = [math]::round((Get-CimInstance -ClassName Win32_ComputerSystem).TotalPhysicalMemory / 1GB, 2)
            $architecture = (Get-CimInstance -ClassName Win32_Processor).Architecture
            $osInfo = Get-CimInstance -ClassName Win32_OperatingSystem
            $osName = $osInfo.Caption
            $osVersion = $osInfo.Version

            # Mapping architecture number to names
            $archName = switch ($architecture) {
              0 { "x86" }
              9 { "x64" }
              default { "Unknown Architecture" }
            }

            Write-Host "Hostname: $hostname"
            Write-Host "Number of CPUs: $numCPUs"
            Write-Host "Total Memory: $totalMemoryGB GB"
            Write-Host "Architecture: $archName"
            Write-Host "OS Name: $osName"
            Write-Host "OS Version: $osVersion"
      - run:
          name: Create and Run CSV Logging Script
          shell: powershell.exe
          command: |
            echo Creating batch script for logging in CSV...
            Add-Content -Path log_usage.bat -Value "@echo off"
            Add-Content -Path log_usage.bat -Value "setlocal"
            Add-Content -Path log_usage.bat -Value "set logFile=usage_log.csv"
            Add-Content -Path log_usage.bat -Value "echo Date and Time, CPU Load, Used RAM (KB), Used RAM (%) > %logFile%"
            Add-Content -Path log_usage.bat -Value ":loop"
            Add-Content -Path log_usage.bat -Value "( "
            Add-Content -Path log_usage.bat -Value "    set timestamp=%date% %time%"
            Add-Content -Path log_usage.bat -Value "    for /f `"tokens=2 delims==`" %%i in ('wmic cpu get loadpercentage /value') do set cpuLoad=%%i"
            Add-Content -Path log_usage.bat -Value "    for /f `"tokens=2 delims==`" %%i in ('wmic OS get FreePhysicalMemory^,TotalVisibleMemorySize /value') do set %%i"
            Add-Content -Path log_usage.bat -Value "    set /a USED_MEMORY=TotalVisibleMemorySize-FreePhysicalMemory"
            Add-Content -Path log_usage.bat -Value "    set /a USED_PERCENTAGE=(USED_MEMORY*100)/TotalVisibleMemorySize"
            Add-Content -Path log_usage.bat -Value "    echo %timestamp%, %cpuLoad%, %USED_MEMORY%, %USED_PERCENTAGE% >> %logFile%"
            Add-Content -Path log_usage.bat -Value ")"
            Add-Content -Path log_usage.bat -Value "timeout /t 10 > nul"
            Add-Content -Path log_usage.bat -Value "goto :loop"

            echo Running the batch script...
            start cmd /c log_usage.bat

            echo Waiting for data collection...
            timeout /t 30 > nul

            echo Terminating data collection...
            taskkill /im cmd.exe /f /t

      - checkout
      - restore_cache:
          keys:
            - cargo-{{ arch }}-{{ checksum "Cargo.toml" }}
            - cargo-{{ arch }}
      - run: curl.exe -SL --output vs_buildtools.exe --url https://aka.ms/vs/17/release/vs_buildtools.exe
      - run: ./vs_buildtools.exe --add Microsoft.VisualStudio.Component.Clang --add Microsoft.VisualStudio.Component.VC.tools.arm64 --wait --includeRecommended --quiet --norestart
      - run: curl.exe --output rustup-init.exe --url https://static.rust-lang.org/rustup/dist/aarch64-pc-windows-msvc/rustup-init.exe
      - run: ./rustup-init.exe -vy
      - run: Invoke-Expression '& "$env:USERPROFILE\.cargo\bin\rustup" toolchain install stable-aarch64-pc-windows-msvc'
      - run: Invoke-Expression '& "$env:USERPROFILE\.cargo\bin\rustup" default stable-aarch64-pc-windows-msvc'
      # Install quality tools
      - run: |
          $env:PATH = "C:\Program Files (x86)\Microsoft Visual Studio\2022\BuildTools\VC\Tools\Llvm\ARM64\bin;" + $env:PATH;
          rustup component add clippy
          rustup component add rustfmt
          cargo install cargo-audit
      # Run checks
      - run: $env:PATH = "C:\Program Files (x86)\Microsoft Visual Studio\2022\BuildTools\VC\Tools\Llvm\ARM64\bin;" + $env:PATH; Invoke-Expression '& "$env:USERPROFILE\.cargo\bin\cargo" check'
      - run: $env:PATH = "C:\Program Files (x86)\Microsoft Visual Studio\2022\BuildTools\VC\Tools\Llvm\ARM64\bin;" + $env:PATH; Invoke-Expression '& "$env:USERPROFILE\.cargo\bin\cargo" clippy -- -D warnings'
      - run: $env:PATH = "C:\Program Files (x86)\Microsoft Visual Studio\2022\BuildTools\VC\Tools\Llvm\ARM64\bin;" + $env:PATH; Invoke-Expression '& "$env:USERPROFILE\.cargo\bin\cargo" fmt -- --check'
      - run: git config --global --unset url.ssh://git@github.com.insteadOf
      - run: cargo audit
      - run: git config --global url.ssh://git@github.com.insteadOf https://github.com/
      - run: $env:PATH = "C:\Program Files (x86)\Microsoft Visual Studio\2022\BuildTools\VC\Tools\Llvm\ARM64\bin;" + $env:PATH; Invoke-Expression '& "$env:USERPROFILE\.cargo\bin\cargo" build --release'
      - run: $env:PATH = "C:\Program Files (x86)\Microsoft Visual Studio\2022\BuildTools\VC\Tools\Llvm\ARM64\bin;" + $env:PATH; Invoke-Expression '& "$env:USERPROFILE\.cargo\bin\cargo" test --release'
      - run: |
          cargo install cargo-cache
          cargo-cache -a clean-unref
      - save_cache:
          key: cargo-{{ arch }}-{{ checksum "Cargo.toml" }}
          paths:
            - ~/.cargo
      - run:
          name: Display the Log File
          command: type usage_log.csv
  windows_arm_64_build:
    machine: true
    resource_class: openbas-platform/openbas-agent-windows-64bits-arm
    shell: 'powershell.exe -ExecutionPolicy Bypass'
    steps:
      - checkout
      - restore_cache:
          keys:
            - cargo-{{ arch }}-{{ checksum "Cargo.toml" }}
            - cargo-{{ arch }}
      - run: choco install -y nsis
      - run: curl.exe -SL --output vs_buildtools.exe --url https://aka.ms/vs/17/release/vs_buildtools.exe
      - run: ./vs_buildtools.exe --add Microsoft.VisualStudio.Component.Clang --add Microsoft.VisualStudio.Component.VC.tools.arm64 --wait --includeRecommended --quiet --norestart
      - run: curl.exe --output rustup-init.exe --url https://static.rust-lang.org/rustup/dist/aarch64-pc-windows-msvc/rustup-init.exe
      - run: ./rustup-init.exe -vy
      - run: Invoke-Expression '& "$env:USERPROFILE\.cargo\bin\rustup" toolchain install stable-aarch64-pc-windows-msvc'
      - run: Invoke-Expression '& "$env:USERPROFILE\.cargo\bin\rustup" default stable-aarch64-pc-windows-msvc'
      - run: $env:PATH = "C:\Program Files (x86)\Microsoft Visual Studio\2022\BuildTools\VC\Tools\Llvm\ARM64\bin;" + $env:PATH; Invoke-Expression '& "$env:USERPROFILE\.cargo\bin\cargo" build --release'
      - run: $env:PATH = "C:\Program Files (x86)\Microsoft Visual Studio\2022\BuildTools\VC\Tools\Llvm\ARM64\bin;" + $env:PATH; Invoke-Expression '& "$env:USERPROFILE\.cargo\bin\cargo" test --release'
      - run: Invoke-Expression '& "C:\Program Files (x86)\NSIS\Bin\makensis" ./installer/windows/agent-installer.nsi'
      - run: Invoke-Expression '& "C:\Program Files (x86)\NSIS\Bin\makensis" ./installer/windows/agent-installer-service-user.nsi'
      - run: Invoke-Expression '& "C:\Program Files (x86)\NSIS\Bin\makensis" ./installer/windows/agent-installer-session-user.nsi'
      - run:
          name: push to jfrog
          command: |
            $env:version = if ($env:CIRCLE_TAG) { $env:CIRCLE_TAG } else { if ($env:CIRCLE_BRANCH -eq "main") { "latest" } else { "prerelease" } }
            curl.exe -u samuel.hassine@filigran.io:$env:JFROG_TOKEN -T ./target/release/openbas-agent.exe "https://filigran.jfrog.io/artifactory/openbas-agent/windows/arm64/openbas-agent-$env:version.exe"
            curl.exe -u samuel.hassine@filigran.io:$env:JFROG_TOKEN -T ./installer/windows/agent-installer.exe "https://filigran.jfrog.io/artifactory/openbas-agent/windows/arm64/openbas-agent-installer-$env:version.exe"
            curl.exe -u samuel.hassine@filigran.io:$env:JFROG_TOKEN -T ./installer/windows/agent-installer.ps1 "https://filigran.jfrog.io/artifactory/openbas-agent/windows/openbas-agent-installer-$env:version.ps1"
            curl.exe -u samuel.hassine@filigran.io:$env:JFROG_TOKEN -T ./installer/windows/agent-upgrade.ps1 "https://filigran.jfrog.io/artifactory/openbas-agent/windows/openbas-agent-upgrade-$env:version.ps1"
            curl.exe -u samuel.hassine@filigran.io:$env:JFROG_TOKEN -T ./installer/windows/agent-installer-session-user.exe "https://filigran.jfrog.io/artifactory/openbas-agent/windows/arm64/openbas-agent-installer-session-user-$env:version.exe"
            curl.exe -u samuel.hassine@filigran.io:$env:JFROG_TOKEN -T ./installer/windows/agent-installer-session-user.ps1 "https://filigran.jfrog.io/artifactory/openbas-agent/windows/openbas-agent-installer-session-user-$env:version.ps1"
            curl.exe -u samuel.hassine@filigran.io:$env:JFROG_TOKEN -T ./installer/windows/agent-upgrade-session-user.ps1 "https://filigran.jfrog.io/artifactory/openbas-agent/windows/openbas-agent-upgrade-session-user-$env:version.ps1"
            curl.exe -u samuel.hassine@filigran.io:$env:JFROG_TOKEN -T ./installer/windows/agent-installer-service-user.exe "https://filigran.jfrog.io/artifactory/openbas-agent/windows/arm64/openbas-agent-installer-service-user-$env:version.exe"
            curl.exe -u samuel.hassine@filigran.io:$env:JFROG_TOKEN -T ./installer/windows/agent-installer-service-user.ps1 "https://filigran.jfrog.io/artifactory/openbas-agent/windows/openbas-agent-installer-service-user-$env:version.ps1"
            curl.exe -u samuel.hassine@filigran.io:$env:JFROG_TOKEN -T ./installer/windows/agent-upgrade-service-user.ps1 "https://filigran.jfrog.io/artifactory/openbas-agent/windows/openbas-agent-upgrade-service-user-$env:version.ps1"
      - run: |
          cargo install cargo-cache
          cargo-cache -a clean-unref
      - save_cache:
          key: cargo-{{ arch }}-{{ checksum "Cargo.toml" }}
          paths:
            - ~/.cargo
  linux_x86_64_compile:
    machine:
      image: ubuntu-2204:current
    steps:
      - checkout
      - restore_cache:
          keys:
            - cargo-{{ arch }}-{{ checksum "Cargo.toml" }}
            - cargo-{{ arch }}
      - run: sudo apt-get update
      - run: sudo apt-get -y install curl musl-tools
      - run: curl https://sh.rustup.rs -sSf | sh -s -- -y
      - run: . "$HOME/.cargo/env"; rustup target add x86_64-unknown-linux-musl
      # Install quality tools
      - run: |
          rustup component add clippy
          rustup component add rustfmt
          cargo install cargo-audit
      # Run checks
      - run: cargo check
      - run: cargo clippy -- -D warnings
      - run: cargo fmt -- --check
      - run: cargo audit
      - run: . "$HOME/.cargo/env"; cargo build --target=x86_64-unknown-linux-musl --release
      - run: . "$HOME/.cargo/env"; cargo test --release
      - run: strip ./target/x86_64-unknown-linux-musl/release/openbas-agent
      - run: |
          cargo install cargo-cache
          cargo-cache -a clean-unref
      - save_cache:
          key: cargo-{{ arch }}-{{ checksum "Cargo.toml" }}
          paths:
            - ~/.cargo
  linux_x86_64_build:
    machine:
      image: ubuntu-2204:current
    steps:
      - checkout
      - restore_cache:
          keys:
            - cargo-{{ arch }}-{{ checksum "Cargo.toml" }}
            - cargo-{{ arch }}
      - run: sudo apt-get update
      - run: sudo apt-get -y install curl musl-tools
      - run: curl https://sh.rustup.rs -sSf | sh -s -- -y
      - run: . "$HOME/.cargo/env"; rustup target add x86_64-unknown-linux-musl
      - run: . "$HOME/.cargo/env"; cargo build --target=x86_64-unknown-linux-musl --release
      - run: . "$HOME/.cargo/env"; cargo test --release
      - run: strip ./target/x86_64-unknown-linux-musl/release/openbas-agent
      - run:
          name: push to jfrog
          command: |
            export version=${CIRCLE_TAG:-$( [ "$CIRCLE_BRANCH" = "main" ] && echo "latest" || echo "prerelease" )}
            curl -usamuel.hassine@filigran.io:$JFROG_TOKEN -T ./target/x86_64-unknown-linux-musl/release/openbas-agent "https://filigran.jfrog.io/artifactory/openbas-agent/linux/x86_64/openbas-agent-$version"
            curl -usamuel.hassine@filigran.io:$JFROG_TOKEN -T ./installer/linux/agent-installer.sh "https://filigran.jfrog.io/artifactory/openbas-agent/linux/openbas-agent-installer-$version.sh"
            curl -usamuel.hassine@filigran.io:$JFROG_TOKEN -T ./installer/linux/agent-upgrade.sh "https://filigran.jfrog.io/artifactory/openbas-agent/linux/openbas-agent-upgrade-$version.sh"
            curl -usamuel.hassine@filigran.io:$JFROG_TOKEN -T ./installer/linux/agent-installer-session-user.sh "https://filigran.jfrog.io/artifactory/openbas-agent/linux/openbas-agent-installer-session-user-$version.sh"
            curl -usamuel.hassine@filigran.io:$JFROG_TOKEN -T ./installer/linux/agent-upgrade-session-user.sh "https://filigran.jfrog.io/artifactory/openbas-agent/linux/openbas-agent-upgrade-session-user-$version.sh"
            curl -usamuel.hassine@filigran.io:$JFROG_TOKEN -T ./installer/linux/agent-installer-service-user.sh "https://filigran.jfrog.io/artifactory/openbas-agent/linux/openbas-agent-installer-service-user-$version.sh"
            curl -usamuel.hassine@filigran.io:$JFROG_TOKEN -T ./installer/linux/agent-upgrade-service-user.sh "https://filigran.jfrog.io/artifactory/openbas-agent/linux/openbas-agent-upgrade-service-user-$version.sh"
      - run: |
          cargo install cargo-cache
          cargo-cache -a clean-unref
      - save_cache:
          key: cargo-{{ arch }}-{{ checksum "Cargo.toml" }}
          paths:
            - ~/.cargo
  linux_arm_64_compile:
    machine:
      image: ubuntu-2204:current
    resource_class: arm.medium
    steps:
      - checkout
      - restore_cache:
          keys:
            - cargo-{{ arch }}-{{ checksum "Cargo.toml" }}
            - cargo-{{ arch }}
      - run: sudo apt-get update
      - run: sudo apt-get -y install curl musl-tools
      - run: curl https://sh.rustup.rs -sSf | sh -s -- -y
      - run: . "$HOME/.cargo/env"; rustup target add aarch64-unknown-linux-musl
      # Install quality tools
      - run: |
          rustup component add clippy
          rustup component add rustfmt
          cargo install cargo-audit
      # Run checks
      - run: cargo check
      - run: cargo clippy -- -D warnings
      - run: cargo fmt -- --check
      - run: cargo audit
      - run: . "$HOME/.cargo/env"; cargo build --target=aarch64-unknown-linux-musl --release
      - run: . "$HOME/.cargo/env"; cargo test --release
      - run: strip ./target/aarch64-unknown-linux-musl/release/openbas-agent
      - run: |
          cargo install cargo-cache
          cargo-cache -a clean-unref
      - save_cache:
          key: cargo-{{ arch }}-{{ checksum "Cargo.toml" }}
          paths:
            - ~/.cargo
  linux_arm_64_build:
    machine:
      image: ubuntu-2204:current
    resource_class: arm.medium
    steps:
      - checkout
      - restore_cache:
          keys:
            - cargo-{{ arch }}-{{ checksum "Cargo.toml" }}
            - cargo-{{ arch }}
      - run: sudo apt-get update
      - run: sudo apt-get -y install curl musl-tools
      - run: curl https://sh.rustup.rs -sSf | sh -s -- -y
      - run: . "$HOME/.cargo/env"; rustup target add aarch64-unknown-linux-musl
      - run: . "$HOME/.cargo/env"; cargo build --target=aarch64-unknown-linux-musl --release
      - run: . "$HOME/.cargo/env"; cargo test --release
      - run: strip ./target/aarch64-unknown-linux-musl/release/openbas-agent
      - run:
          name: push to jfrog
          command: |
            export version=${CIRCLE_TAG:-$( [ "$CIRCLE_BRANCH" = "main" ] && echo "latest" || echo "prerelease" )}
            curl -usamuel.hassine@filigran.io:$JFROG_TOKEN -T ./target/aarch64-unknown-linux-musl/release/openbas-agent "https://filigran.jfrog.io/artifactory/openbas-agent/linux/arm64/openbas-agent-$version"
            curl -usamuel.hassine@filigran.io:$JFROG_TOKEN -T ./installer/linux/agent-installer.sh "https://filigran.jfrog.io/artifactory/openbas-agent/linux/openbas-agent-installer-$version.sh"
            curl -usamuel.hassine@filigran.io:$JFROG_TOKEN -T ./installer/linux/agent-upgrade.sh "https://filigran.jfrog.io/artifactory/openbas-agent/linux/openbas-agent-upgrade-$version.sh"
            curl -usamuel.hassine@filigran.io:$JFROG_TOKEN -T ./installer/linux/agent-installer-session-user.sh "https://filigran.jfrog.io/artifactory/openbas-agent/linux/openbas-agent-installer-session-user-$version.sh"
            curl -usamuel.hassine@filigran.io:$JFROG_TOKEN -T ./installer/linux/agent-upgrade-session-user.sh "https://filigran.jfrog.io/artifactory/openbas-agent/linux/openbas-agent-upgrade-session-user-$version.sh"
            curl -usamuel.hassine@filigran.io:$JFROG_TOKEN -T ./installer/linux/agent-installer-service-user.sh "https://filigran.jfrog.io/artifactory/openbas-agent/linux/openbas-agent-installer-service-user-$version.sh"
            curl -usamuel.hassine@filigran.io:$JFROG_TOKEN -T ./installer/linux/agent-upgrade-service-user.sh "https://filigran.jfrog.io/artifactory/openbas-agent/linux/openbas-agent-upgrade-service-user-$version.sh"
      - run: |
          cargo install cargo-cache
          cargo-cache -a clean-unref
      - save_cache:
          key: cargo-{{ arch }}-{{ checksum "Cargo.toml" }}
          paths:
            - ~/.cargo
  macos_arm_64_compile:
    macos:
      xcode: 15.3.0
    resource_class: macos.m1.medium.gen1
    steps:
      - run:
          name: Print macOS System Info
          command: |
            echo Hostname: $(hostname)
            echo Number of CPUs: $(sysctl -n hw.ncpu)
            echo Architecture: $(uname -m)
            echo RAM: $(system_profiler SPHardwareDataType | grep "Memory")
            echo OS Version: $(sw_vers -productVersion)
      - run:
          name: Create and Run CSV Logging Script
          command: |
            echo "Date and Time, CPU Load (%), Used RAM (MB), Total RAM (MB), Used RAM (%)" > usage_log.csv

            for i in {1..3}
            do
              timestamp=$(date +"%Y-%m-%d %H:%M:%S")
              cpu_load=$(ps -A -o %cpu | awk '{s+=$1} END {print s}')
              used_ram=$(vm_stat | grep "used_pages" | awk '{print $3}' | tr -d '.')
              used_ram_mb=$((used_ram * 4096 / 1048576))
              total_ram_mb=$(sysctl hw.memsize | awk '{print $2 / 1048576}')
              used_ram_percent=$(echo "scale=2; ($used_ram_mb/$total_ram_mb)*100" | bc)

              echo "$timestamp, $cpu_load, $used_ram_mb, $total_ram_mb, $used_ram_percent" >> usage_log.csv
              
              sleep 10
            done
      - checkout
      - restore_cache:
          keys:
            - cargo-{{ arch }}-{{ checksum "Cargo.toml" }}
            - cargo-{{ arch }}
      - run: curl https://sh.rustup.rs -sSf | sh -s -- -y
      # Install quality tools
      - run: |
          rustup component add clippy
          rustup component add rustfmt
          cargo install cargo-audit
      # Run checks
      - run: cargo check
      - run: cargo clippy -- -D warnings
      - run: cargo fmt -- --check
      - run: cargo audit
      - run: . "$HOME/.cargo/env"; cargo build --release
      - run: . "$HOME/.cargo/env"; cargo test --release
      - run: strip ./target/release/openbas-agent
      - run: |
          cargo install cargo-cache
          cargo-cache -a clean-unref
      - save_cache:
          key: cargo-{{ arch }}-{{ checksum "Cargo.toml" }}
          paths:
            - ~/.cargo
      - run:
          name: Display the Log File
          command: cat usage_log.csv
  macos_arm_64_build:
    macos:
      xcode: 15.3.0
    resource_class: macos.m1.medium.gen1
    steps:
      - checkout
      - restore_cache:
          keys:
            - cargo-{{ arch }}-{{ checksum "Cargo.toml" }}
            - cargo-{{ arch }}
      - run: curl https://sh.rustup.rs -sSf | sh -s -- -y
      - run: . "$HOME/.cargo/env"; cargo build --release
      - run: . "$HOME/.cargo/env"; cargo test --release
      - run: strip ./target/release/openbas-agent
      - run:
          name: push to jfrog
          command: |
            export version=${CIRCLE_TAG:-$( [ "$CIRCLE_BRANCH" = "main" ] && echo "latest" || echo "prerelease" )}
            curl -usamuel.hassine@filigran.io:$JFROG_TOKEN -T ./target/release/openbas-agent "https://filigran.jfrog.io/artifactory/openbas-agent/macos/arm64/openbas-agent-$version"
            curl -usamuel.hassine@filigran.io:$JFROG_TOKEN -T ./installer/macos/agent-installer.sh "https://filigran.jfrog.io/artifactory/openbas-agent/macos/openbas-agent-installer-$version.sh"
            curl -usamuel.hassine@filigran.io:$JFROG_TOKEN -T ./installer/macos/agent-upgrade.sh "https://filigran.jfrog.io/artifactory/openbas-agent/macos/openbas-agent-upgrade-$version.sh"
            curl -usamuel.hassine@filigran.io:$JFROG_TOKEN -T ./installer/macos/agent-installer-session-user.sh "https://filigran.jfrog.io/artifactory/openbas-agent/macos/openbas-agent-installer-session-user-$version.sh"
            curl -usamuel.hassine@filigran.io:$JFROG_TOKEN -T ./installer/macos/agent-upgrade-session-user.sh "https://filigran.jfrog.io/artifactory/openbas-agent/macos/openbas-agent-upgrade-session-user-$version.sh"
            curl -usamuel.hassine@filigran.io:$JFROG_TOKEN -T ./installer/macos/agent-installer-service-user.sh "https://filigran.jfrog.io/artifactory/openbas-agent/macos/openbas-agent-installer-service-user-$version.sh"
            curl -usamuel.hassine@filigran.io:$JFROG_TOKEN -T ./installer/macos/agent-upgrade-service-user.sh "https://filigran.jfrog.io/artifactory/openbas-agent/macos/openbas-agent-upgrade-service-user-$version.sh"
      - run: |
          cargo install cargo-cache
          cargo-cache -a clean-unref
      - save_cache:
          key: cargo-{{ arch }}-{{ checksum "Cargo.toml" }}
          paths:
            - ~/.cargo
  macos_x86_64_compile:
    machine: true
    resource_class: openbas-platform/openbas-agent-macos-64bits-x86
    steps:
      - run:
          name: Print macOS System Info
          command: |
            echo Hostname: $(hostname)
            echo Number of CPUs: $(sysctl -n hw.ncpu)
            echo Architecture: $(uname -m)
            echo RAM: $(system_profiler SPHardwareDataType | grep "Memory")
            echo OS Version: $(sw_vers -productVersion)
      - run:
          name: Create and Run CSV Logging Script
          command: |
            echo "Date and Time, CPU Load (%), Used RAM (MB), Total RAM (MB), Used RAM (%)" > usage_log.csv

            for i in {1..3}
            do
              timestamp=$(date +"%Y-%m-%d %H:%M:%S")
              cpu_load=$(ps -A -o %cpu | awk '{s+=$1} END {print s}')
              used_ram=$(vm_stat | grep "used_pages" | awk '{print $3}' | tr -d '.')
              used_ram_mb=$((used_ram * 4096 / 1048576))
              total_ram_mb=$(sysctl hw.memsize | awk '{print $2 / 1048576}')
              used_ram_percent=$(echo "scale=2; ($used_ram_mb/$total_ram_mb)*100" | bc)

              echo "$timestamp, $cpu_load, $used_ram_mb, $total_ram_mb, $used_ram_percent" >> usage_log.csv
              
              sleep 10
            done
      - checkout
      - restore_cache:
          keys:
            - cargo-{{ arch }}-{{ checksum "Cargo.toml" }}
            - cargo-{{ arch }}
      - run: curl https://sh.rustup.rs -sSf | sh -s -- -y
      # Install quality tools
      - run: |
          rustup component add clippy
          rustup component add rustfmt
          cargo install cargo-audit
      # Run checks
      - run: cargo check
      - run: cargo clippy -- -D warnings
      - run: cargo fmt -- --check
      - run: cargo audit
      - run: . "$HOME/.cargo/env"; cargo build --release
      - run: . "$HOME/.cargo/env"; cargo test --release
      - run: strip ./target/release/openbas-agent
      - run: |
          cargo install --force cargo-cache
          cargo-cache -a clean-unref
      - save_cache:
          key: cargo-{{ arch }}-{{ checksum "Cargo.toml" }}
          paths:
            - ~/.cargo
      - run:
          name: Display the Log File
          command: cat usage_log.csv
  macos_x86_64_build:
    machine: true
    resource_class: openbas-platform/openbas-agent-macos-64bits-x86
    steps:
      - checkout
      - restore_cache:
          keys:
            - cargo-{{ arch }}-{{ checksum "Cargo.toml" }}
            - cargo-{{ arch }}
      - run: curl https://sh.rustup.rs -sSf | sh -s -- -y
      - run: . "$HOME/.cargo/env"; cargo build --release
      - run: . "$HOME/.cargo/env"; cargo test --release
      - run: strip ./target/release/openbas-agent
      - run:
          name: push to jfrog
          command: |
            export version=${CIRCLE_TAG:-$( [ "$CIRCLE_BRANCH" = "main" ] && echo "latest" || echo "prerelease" )}
            curl -usamuel.hassine@filigran.io:$JFROG_TOKEN -T ./target/release/openbas-agent "https://filigran.jfrog.io/artifactory/openbas-agent/macos/x86_64/openbas-agent-$version"
      - run: |
          cargo install --force cargo-cache
          cargo-cache -a clean-unref
      - save_cache:
          key: cargo-{{ arch }}-{{ checksum "Cargo.toml" }}
          paths:
            - ~/.cargo
workflows:
  openbas-agent:
    jobs:
      - windows_x86_64_compile:
          filters:
            tags:
              ignore: /.*/
            branches:
              ignore: /.*/
      - windows_x86_64_build:
          filters:
            tags:
              only: /[0-9]+(\.[0-9]+)+(\.[0-9]+)*/
            branches:
              only:
                - main
                - release/current
      - windows_arm_64_compile:
          filters:
            tags:
              ignore: /.*/
            branches:
              ignore: /.*/
      - windows_arm_64_build:
          filters:
            tags:
              only: /[0-9]+(\.[0-9]+)+(\.[0-9]+)*/
            branches:
              only:
                - main
                - release/current
      - linux_x86_64_compile:
          filters:
            tags:
              ignore: /.*/
            branches:
              ignore: /.*/
      - linux_x86_64_build:
          filters:
            tags:
              only: /[0-9]+(\.[0-9]+)+(\.[0-9]+)*/
            branches:
              only:
                - main
                - release/current
      - linux_arm_64_compile:
          filters:
            tags:
              ignore: /.*/
            branches:
              ignore: /.*/
      - linux_arm_64_build:
          filters:
            tags:
              only: /[0-9]+(\.[0-9]+)+(\.[0-9]+)*/
            branches:
              only:
                - main
                - release/current
      - macos_arm_64_compile:
          filters:
            tags:
              ignore: /.*/
            branches:
              ignore: /.*/
      - macos_arm_64_build:
          filters:
            tags:
              only: /[0-9]+(\.[0-9]+)+(\.[0-9]+)*/
            branches:
              only:
                - main
                - release/current
      - macos_x86_64_compile:
          filters:
            tags:
              ignore: /.*/
            branches:
              ignore: /.*/
      - macos_x86_64_build:
          filters:
            tags:
              only: /[0-9]+(\.[0-9]+)+(\.[0-9]+)*/
            branches:
              only:
                - main
                - release/current
